module Main where

import Daml.Script
import User
import Bank

setup : Script ()
setup = script do
  jack <- allocatePartyWithHint "Jack" (PartyIdHint "Jack")
  nicole <- allocatePartyWithHint "Nicole" (PartyIdHint "Nicole")
  admin <- allocatePartyWithHint "Admin" (PartyIdHint "Admin")
  platform <- allocatePartyWithHint "Platform" (PartyIdHint "Platform")

  -- Platform bank account created
  platformBankAccount <- submit platform do
    createCmd BankAccount
      with
        owner = platform
        balance = 0.0

  -- Platform created
  newPlatform <- submit platform do
    createCmd Platform
      with
        platform
        admin = admin
        users = []
        account = platformBankAccount

  -- 'jack' creates a bank account in order to use real estate app
  jacksBankAccount <- submit jack do
    createCmd BankAccount
      with
        owner = jack
        balance = 0.0

  -- 'jack' needs funds so he makes a deposit in his bank account
  jacksBankAccountWithDeposit <- submit jack do
    exerciseCmd jacksBankAccount MakeDeposit
      with
        amountToDeposit = 100000000.00
  
  -- 'jack creates user proposal
  jacksUserProposal <- submit jack do
    createCmd UserProposal
      with
        user = jack
        admin
        account = jacksBankAccountWithDeposit
        offers = []
        propertiesOwned = []
  
  -- 'admin' accepts
  jackUser <- submit admin do
    exerciseCmd jacksUserProposal AcceptUserProposal
  
  -- 'admin' updates Platform
  jackUpdatedPlatform <- submit admin do
    exerciseCmd newPlatform UpdateUsers
      with
        userToAdd = jack
    
  -- 'nicole' creates bank account
  nicolesBankAccount <- submit nicole do
    createCmd BankAccount
      with 
        owner = nicole
        balance = 10000.0
  
  -- 'nicole' user proposal
  nicolesUserProposal <- submit nicole do
    createCmd UserProposal
      with
        user = nicole
        admin 
        account = nicolesBankAccount
        offers = []
        propertiesOwned = []

  -- 'admin' accepts
  nicoleUser <- submit admin do
    exerciseCmd nicolesUserProposal AcceptUserProposal

  -- Platform updated
  nicoleUpdatedPlatform <- submit platform do
    createCmd Platform
      with
        platform
        admin
        users = [jack, nicole]
        account = platformBankAccount
  
  -- 'nicole' mints new property
  (nicoleNewProperty, nicoleNewBankAccount, nicoleUpdateProposal) <- submit nicole do
    exerciseCmd nicoleUser MintProperty
      with
        public = [jack]
        newPrice = 50000.00
        newAddress = "123 Expensive Street"
        newBuilderRoyaltyRate = 0.08
  
  submit admin do
    exerciseCmd nicoleUpdateProposal AcceptUserProposal
    
  -- 'nicole' creates new listing
  createdListings <- submitMulti [nicole] [jack] do
    createCmd Listing
      with
        admin
        users = [jack]
        owner = nicole
        properties = [nicoleNewProperty]

  currentTime <- getTime
  
  jacksOffer <- submit jack do
    createCmd PropertyOffer
      with
        admin
        issuer = jack
        owner = nicole
        property = nicoleNewProperty
        offerPrice = 50000.0
        timeSubmitted = currentTime
  
  (_, propertyOfferPayable, platformPayable, conditionalPayable, _) <- submitMulti [nicole] [jack] do
    exerciseCmd jacksOffer AcceptPropertyOffer
      with
        fromParty = jack
        toParty = nicole
        issuerAccount = jacksBankAccountWithDeposit
        ownerAccount = nicoleNewBankAccount
        minterAccount = nicolesBankAccount
        platformAccount = platformBankAccount
        platform = newPlatform

  (bank1, bank2, _) <- submitMulti [nicole] [admin] do
    exerciseCmd propertyOfferPayable AcceptOwnerPayable
      with
        sending = jackUser
        receiving = nicoleUser

  -- (jackAfterPlatformPayable, platformAfterPayable, _) <- submitMulti [nicole] [admin] do
  --   exerciseCmd platformPayable AcceptPlatformPayable
  --     with
  --       sending = jackUpdateUser
  --       receiving = newPlatform

  -- submit admin do
  --   exerciseCmd jackAfterPlatformPayable AcceptUserProposal

  return ()
