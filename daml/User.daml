module User where

import DA.Time
import Bank
import Property

template User
  with
    user : Party
    admin : Party                                                                                        
    account : ContractId BankAccount
    offers : [PropertyOffer]
    propertiesOwned : [Property]
  where
    signatory user, admin

    nonconsuming choice MintProperty : ContractId Property
        with
          currentUser : ContractId User
          newPrice : Decimal
          newAddress : Text
          newPropertyRoyaltyRate : Decimal
        controller user
        do
          exercise account MakeDeposit
            with
              amountToDeposit = -10000.0

          newProperty <- create Property 
            with 
              admin
              issuer = user
              owner = user
              price = newPrice
              address = newAddress
              propertyRoyaltyRate = newPropertyRoyaltyRate
              platformRoyaltyRate = 0.04
              priceHistory = [newPrice]
          
          fetchedProperty <- fetch newProperty
          
          exercise currentUser UpdateUser
            with
              property = fetchedProperty
          
          return (newProperty)
    
    choice UpdateUser : ContractId User
      with
        property : Property
      controller user
      do
        create User 
          with
            user
            admin                                                                                       
            account
            offers
            propertiesOwned = property :: propertiesOwned


template UserProposal
  with
    user : Party
    admin : Party
    account : ContractId BankAccount
    offers : [PropertyOffer]
    propertiesOwned : [Property]
  where
    signatory user
    
    choice AcceptUserProposal : ContractId User
      controller admin
      do
        create User with ..
          
    choice RejectUserProposal : ()
      controller admin
      do return ()

template Listing 
  with
    admin : Party
    users : [Party]
    owner : Party
    properties : [ContractId Property]
  where
    signatory owner
    observer admin, users

    nonconsuming choice ListProperty : ContractId Listing
      with
        user : Party
        newProperty : ContractId Property
      controller user
      do
        property <- fetch newProperty
        assertMsg 
          "User needs to be the owner in order to List the property." 
          (property.owner == user)
        
        create Listing with 
          admin
          users
          owner
          properties = newProperty :: properties

template PropertyOffer
  with
    admin : Party
    issuer : Party
    owner : Party
    property : ContractId Property
    offerPrice : Decimal
    timeSubmitted : Time
  where
    signatory issuer
    observer admin, owner

    choice AcceptPropertyOffer : 
      (
        ContractId PropertyAgreement, 
        ContractId PropertyOfferPayableRequest, 
        Optional (ContractId ConditionalRoyaltyPayableRequest), 
        ContractId PlatformPayableRequest
      )
      with
        fromParty : Party
        toParty : Party
        platformParty : Party
        issuerAccount : ContractId BankAccount
        ownerAccount : ContractId BankAccount
        minterAccount : ContractId BankAccount
        platformAccount : ContractId BankAccount
        platform : ContractId Platform
      controller owner
      do
        currentTime <- getTime
        let passedTime = convertRelTimeToMicroseconds (subTime currentTime timeSubmitted)
        let fiveMinutes = convertRelTimeToMicroseconds (minutes 5)

        fetchedProperty <- fetch property
        fetchedIssuerAccount <- fetch issuerAccount

        assertMsg
          ("Offer price needs to match the property price of : " <> show fetchedProperty.price)
          (offerPrice == fetchedProperty.price)

        assertMsg
          "Time duration of 5 minutes has passed. This contract has been rejected."
          (passedTime <= fiveMinutes)
        
        assertMsg
          ("Failed due to insufficient funds." <> show fetchedIssuerAccount)
          (((fetchedIssuerAccount.balance - offerPrice) - ((offerPrice * fetchedProperty.propertyRoyaltyRate) + (offerPrice * fetchedProperty.platformRoyaltyRate))) >= 0.0)

        propertyAgreement <- create PropertyAgreement 
          with 
            propertyId = property
            property = fetchedProperty
            ..

        propertyOfferPayableRequest <- create PropertyOfferPayableRequest
          with
            issuer = toParty
            owner = fromParty
            admin
            amount = offerPrice
            property = fetchedProperty
            issuerAccount
            ownerAccount

        conditionalRoyaltyPaymentRequest <- if fetchedProperty.owner == fetchedProperty.issuer
          then return None
          else Some <$> create ConditionalRoyaltyPayableRequest
            with
              issuer = platformParty
              owner = fromParty
              admin
              amount = offerPrice * fetchedProperty.propertyRoyaltyRate
              property = fetchedProperty
              issuerAccount 
              minterAccount

        platformPayableRequest <- create PlatformPayableRequest
          with
            issuer = platformParty
            owner = fromParty
            admin
            amount = offerPrice * fetchedProperty.platformRoyaltyRate
            property = fetchedProperty
            issuerAccount 
            platformAccount
        
        -- propertyHolderPaymentInitiator <- create PropertyHolderPaymentInitiator
        --   with
        --     amount = offerPrice * 0.01
        --     admin
        --     owner = issuer
        --     ownerAccount
        --     timeSubmitted = currentTime

        return (propertyAgreement, propertyOfferPayableRequest, conditionalRoyaltyPaymentRequest, platformPayableRequest)
    
    choice MakeCounterOffer : ContractId PropertyOffer
      with
        newOfferPrice : Decimal
      controller owner
      do
        currentTime <- getTime

        create PropertyOffer with
          offerPrice = newOfferPrice
          timeSubmitted = currentTime
          ..
    
    choice RejectProposal : ()
      controller owner
      do return ()

    choice WithdrawProposal : ()
      controller issuer
      do return ()
      
    choice ReplaceOffer : (ContractId PropertyOffer, ContractId User)
      with
        user : ContractId User
      controller issuer
      do
        currentTime <- getTime
        fetchedProperty <- fetch property
        fetchedUser <- fetch user 

        propertyOffer <- create PropertyOffer with 
          timeSubmitted = currentTime
          ..
        
        updatedUser <- create User with
          admin
          user = issuer
          account = fetchedUser.account
          offers = this :: fetchedUser.offers
          propertiesOwned = fetchedProperty :: fetchedUser.propertiesOwned
        
        return (propertyOffer, updatedUser)

template PropertyOfferPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    ownerAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin, toParty

    choice AcceptOwnerPayable : (ContractId BankAccount, ContractId BankAccount, ContractId Receipt)
      with
        sending : ContractId User
        receiving : ContractId User
      controller toParty
      do
        issuerAccountInfo <- fetch issuerAccount
        receiverAccountInfo <- fetch ownerAccount

        fetchedSendingParty <- fetch sending
        fetchedReceivingParty <- fetch receiving

        sendingBankAccount <- create BankAccount
          with
            owner = fromParty
            balance = issuerAccountInfo.balance - amount
        
        receivingBankAccount <- create BankAccount
          with
            owner = toParty
            balance = receiverAccountInfo.balance + amount

        currentTime <- getTime
        newReceipt <- create Receipt
          with
            amount = property.price
            sender = fromParty
            receiver = toParty
            timeReceived = currentTime
        
        return (sendingBankAccount, receivingBankAccount, newReceipt)

template ConditionalRoyaltyPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    minterAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin, toParty

    choice AcceptConditionalPayable : (ContractId User, ContractId User, ContractId Receipt)
      with
        sending : ContractId User
        receiving : ContractId User
      controller toParty
      do
        issuerAccountInfo <- fetch issuerAccount
        receiverAccountInfo <- fetch minterAccount

        fetchedSendingParty <- fetch sending
        fetchedReceivingParty <- fetch receiving

        sendingBankAccount <- create BankAccount
          with
            owner = fromParty
            balance = issuerAccountInfo.balance - amount
        
        receivingBankAccount <- create BankAccount
          with
            owner = toParty
            balance = receiverAccountInfo.balance + amount

        sendingUser <- create User
          with
            user = fromParty
            admin
            account = sendingBankAccount
            offers = fetchedSendingParty.offers
            propertiesOwned = fetchedSendingParty.propertiesOwned
          
        receivingUser <- create User
          with
            user = fetchedReceivingParty.user
            admin
            account = receivingBankAccount
            offers = fetchedSendingParty.offers
            propertiesOwned = fetchedSendingParty.propertiesOwned

        currentTime <- getTime
        newReceipt <- create Receipt
          with
            amount = property.propertyRoyaltyRate
            sender = fromParty
            receiver = toParty
            timeReceived = currentTime
        
        return (sendingUser, receivingUser, newReceipt)

template PlatformPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    platformAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin, toParty

    choice AcceptPlatformPayable : (ContractId UserProposal, ContractId Platform, ContractId Receipt)
      with
        sending : ContractId User
        receiving : ContractId Platform
      controller toParty
      do
        issuerAccountInfo <- fetch issuerAccount
        receiverAccountInfo <- fetch platformAccount

        fetchedSendingParty <- fetch sending
        fetchedPlatform <- fetch receiving

        sendingBankAccount <- create BankAccount
          with
            owner = fromParty
            balance = issuerAccountInfo.balance - property.platformRoyaltyRate
        
        receivingBankAccount <- create BankAccount
          with
            owner = toParty
            balance = receiverAccountInfo.balance + property.platformRoyaltyRate

        sendingUser <- create UserProposal
          with
            user = fromParty
            admin
            account = sendingBankAccount
            offers = fetchedSendingParty.offers
            propertiesOwned = fetchedSendingParty.propertiesOwned
          
        receivingUser <- create Platform
          with
            platform = fetchedPlatform.platform
            admin
            users = fetchedPlatform.users
            account = receivingBankAccount

        currentTime <- getTime
        newReceipt <- create Receipt
          with
            amount = property.platformRoyaltyRate
            sender = fromParty
            receiver = toParty
            timeReceived = currentTime
        
        return (sendingUser, receivingUser, newReceipt)

template PropertyHolderPaymentInitiator
  with
    amount : Decimal
    admin : Party
    owner : Party
    ownerAccount : ContractId BankAccount
    timeSubmitted : Time
  where
    signatory admin
    observer owner

    -- controller admin can
    --   Initiate : (ContractId BankAccount, ContractId Receipt)
    --     do
    --       let passedTime = convertRelTimeToMicroseconds (subTime currentTime timeSubmitted)
    --       let thirtyMinutes = convertRelTimeToMicroseconds (minutes 30)

    --       account <- 

-- FORMS

template PropertyOfferPayableRequest
  with
    issuer : Party
    owner : Party
    admin : Party
    amount : Decimal
    property : Property
    issuerAccount : ContractId BankAccount
    ownerAccount : ContractId BankAccount
  where
    signatory issuer
    observer owner

    choice AcceptPropertyOfferPayableRequest : ContractId PropertyOfferPayable
      controller owner
      do
        create PropertyOfferPayable
          with
            admin
            amount
            issuerAccount 
            ownerAccount
            property
            fromParty = owner
            toParty = issuer

template ConditionalRoyaltyPayableRequest
  with
    issuer : Party
    owner : Party
    admin : Party
    amount : Decimal
    property : Property
    issuerAccount : ContractId BankAccount
    minterAccount : ContractId BankAccount
  where
    signatory issuer
    observer owner

    choice AcceptConditionalRoyaltyPayableRequest : ContractId ConditionalRoyaltyPayable
      controller owner
      do
        create ConditionalRoyaltyPayable
          with
            admin
            amount
            issuerAccount 
            minterAccount
            property
            fromParty = owner
            toParty = issuer

template PlatformPayableRequest
  with
    issuer : Party
    owner : Party
    admin : Party
    amount : Decimal
    property : Property
    issuerAccount : ContractId BankAccount
    platformAccount : ContractId BankAccount
  where
    signatory issuer
    observer owner

    choice AcceptPlatformPayableRequest : ContractId PlatformPayable
      controller owner
      do
        create PlatformPayable
          with
            admin
            amount
            issuerAccount 
            platformAccount
            property
            fromParty = owner
            toParty = issuer

template Platform 
  with
    platform : Party
    admin : Party
    users : [Party]
    account : ContractId BankAccount
  where
    signatory platform
    observer admin, users

    choice UpdateUsers : ContractId Platform
      with
        userToAdd : Party
      controller admin
      do
        create Platform
          with
            users = userToAdd :: users
            ..

template Receipt
  with
    amount : Decimal
    sender : Party
    receiver : Party
    timeReceived : Time
  where
    signatory sender, receiver

    choice Dismiss : ()
      controller receiver
      do return ()
