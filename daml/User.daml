module User where

import DA.Time
import Bank
import Property

template UserProposal
  with
    user : Party
    admin : Party
    account : ContractId BankAccount
    offers : [PropertyOffer]
    propertiesOwned : [Property]
  where
    signatory user
    
    controller admin can
      AcceptUserProposal : ContractId User
        do
          create User with ..
          
      RejectUserProposal : ()
        do return ()

template Listing 
  with
    admin : Party
    users : [Party]
    owner : Party
    properties : [ContractId Property]
  where
    signatory owner
    observer admin, users

    nonconsuming choice ListProperty : ContractId Listing
      with
        user : Party
        newProperty : ContractId Property
      controller user
      do
        property <- fetch newProperty
        assertMsg 
          "User needs to be the owner in order to List the property." 
          (property.owner == user)
        
        create Listing with 
          admin
          users
          owner
          properties = newProperty :: properties

template User
  with
    user : Party
    admin : Party                                                                                        
    account : ContractId BankAccount
    offers : [PropertyOffer]
    propertiesOwned : [Property]
  where
    signatory user, admin

    controller user can
      nonconsuming MintProperty : (ContractId Property, ContractId BankAccount, ContractId UserProposal)
        with
          newPrice : Decimal
          newAddress : Text
          newBuilderRoyaltyRate : Decimal
        do
          accountInfo <- fetch account

          newBankAccount <- create BankAccount
            with
              owner = user
              balance = accountInfo.balance - 10000.0

          newProperty <- create Property 
            with 
              admin
              issuer = user
              owner = user
              price = newPrice
              address = newAddress
              builderRoyaltyRate = newBuilderRoyaltyRate
              platformRoyaltyRate = 0.04
              priceHistory = [newPrice]
          
          fetchedProperty <- fetch newProperty
          
          nicoleUpdateProposal <- create UserProposal
            with 
              user
              admin
              account = newBankAccount
              offers
              propertiesOwned = [fetchedProperty]
          
          return (newProperty, newBankAccount, nicoleUpdateProposal)

template Platform 
  with
    platform : Party
    admin : Party
    users : [Party]
    account : ContractId BankAccount
  where
    signatory platform
    observer admin, users

    controller admin can
      nonconsuming UpdateUsers : ContractId Platform
        with
          userToAdd : Party
        do
          create Platform
            with
              users = userToAdd :: users
              ..

template Receipt
  with
    amount : Decimal
    sender : Party
    receiver : Party
    timeReceived : Time
  where
    signatory sender, receiver

    controller receiver can
      Dismiss : ()
        do return ()

template PropertyOffer
  with
    admin : Party
    issuer : Party
    owner : Party
    property : ContractId Property
    offerPrice : Decimal
    timeSubmitted : Time
  where
    signatory issuer
    observer owner

    controller owner can
      AcceptPropertyOffer : 
        (
          ContractId PropertyAgreement, 
          ContractId PropertyOfferPayable, 
          ContractId PlatformPayable, 
          Optional (ContractId ConditionalRoyaltyPayable), 
          ContractId Property
        )
        with
          fromParty : Party
          toParty : Party
          platformParty : Party
          issuerAccount : ContractId BankAccount
          ownerAccount : ContractId BankAccount
          minterAccount : ContractId BankAccount
          platformAccount : ContractId BankAccount
          platform : ContractId Platform
        do
          currentTime <- getTime
          let passedTime = convertRelTimeToMicroseconds (subTime currentTime timeSubmitted)
          let fiveMinutes = convertRelTimeToMicroseconds (minutes 5)

          fetchedProperty <- fetch property
          fetchedIssuerAccount <- fetch issuerAccount

          assertMsg
            ("Offer price needs to match the property price of : " <> show fetchedProperty.price)
            (offerPrice == fetchedProperty.price)

          assertMsg
            "Time duration of 5 minutes has passed. This contract has been rejected."
            (passedTime <= fiveMinutes)
          
          assertMsg
            ("Failed due to insufficient funds." <> show fetchedIssuerAccount)
            (((fetchedIssuerAccount.balance - offerPrice) - ((offerPrice * fetchedProperty.builderRoyaltyRate) + (offerPrice * fetchedProperty.platformRoyaltyRate))) >= 0.0)
        
          propertyAgreement <- create PropertyAgreement 
            with 
              property = fetchedProperty
              ..

          propertyOfferPayable <- create PropertyOfferPayable
            with
              admin
              amount = (offerPrice - ((offerPrice * fetchedProperty.platformRoyaltyRate) + (offerPrice * fetchedProperty.builderRoyaltyRate)))
              issuerAccount 
              ownerAccount
              property = fetchedProperty
              fromParty = fromParty
              toParty = toParty

          conditionalRoyaltyPayment <- if fetchedProperty.owner == fetchedProperty.issuer
            then return None
            else Some <$> create ConditionalRoyaltyPayable
              with
                admin
                amount = offerPrice * fetchedProperty.builderRoyaltyRate
                issuerAccount 
                minterAccount
                property = fetchedProperty
                fromParty = fromParty
                toParty = toParty

          platformPayable <- create PlatformPayable
            with
              admin
              amount = offerPrice * fetchedProperty.platformRoyaltyRate
              issuerAccount 
              platformAccount = platformAccount
              property = fetchedProperty
              fromParty = fromParty
              toParty = platformParty
            
          newProperty <- create Property
            with
              admin
              issuer = fetchedProperty.issuer
              owner = issuer
              address = fetchedProperty.address
              price = fetchedProperty.price
              builderRoyaltyRate = fetchedProperty.builderRoyaltyRate
              platformRoyaltyRate = fetchedProperty.platformRoyaltyRate
              priceHistory = fetchedProperty.priceHistory
          
          -- propertyHolderPaymentInitiator <- create PropertyHolderPaymentInitiator
          --   with
          --     amount = offerPrice * 0.01
          --     admin
          --     owner = issuer
          --     ownerAccount
          --     timeSubmitted = currentTime

          return (propertyAgreement, propertyOfferPayable, platformPayable, conditionalRoyaltyPayment, newProperty)
    
      MakeCounterOffer : ContractId PropertyOffer
        with
          newOfferPrice : Decimal
        do
          currentTime <- getTime

          create PropertyOffer with
            offerPrice = newOfferPrice
            timeSubmitted = currentTime
            ..
    
      RejectProposal : ()
        do return ()

    controller issuer can
      WithdrawProposal : ()
        do return ()
      
      ReplaceOffer : (ContractId PropertyOffer, ContractId User)
        with
          user : ContractId User
        do
          currentTime <- getTime
          fetchedProperty <- fetch property
          fetchedUser <- fetch user 

          propertyOffer <- create PropertyOffer with 
            timeSubmitted = currentTime
            ..
          
          updatedUser <- create User with
            admin
            user = issuer
            account = fetchedUser.account
            offers = this :: fetchedUser.offers
            propertiesOwned = fetchedProperty :: fetchedUser.propertiesOwned
          
          return (propertyOffer, updatedUser)

template PropertyOfferPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    ownerAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin, toParty

    controller toParty can
      AcceptOwnerPayable : (ContractId BankAccount, ContractId BankAccount, ContractId Receipt)
        with
          sending : ContractId User
          receiving : ContractId User
        do
          issuerAccountInfo <- fetch issuerAccount
          receiverAccountInfo <- fetch ownerAccount

          fetchedSendingParty <- fetch sending
          fetchedReceivingParty <- fetch receiving

          sendingBankAccount <- create BankAccount
            with
              owner = fromParty
              balance = issuerAccountInfo.balance - amount
          
          receivingBankAccount <- create BankAccount
            with
              owner = toParty
              balance = receiverAccountInfo.balance + amount

          currentTime <- getTime
          newReceipt <- create Receipt
            with
              amount = property.price
              sender = fromParty
              receiver = toParty
              timeReceived = currentTime
          
          return (sendingBankAccount, receivingBankAccount, newReceipt)

template ConditionalRoyaltyPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    minterAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin, toParty

    controller toParty can 
      AcceptConditionalPayable : (ContractId User, ContractId User, ContractId Receipt)
        with
          sending : ContractId User
          receiving : ContractId User
        do
          issuerAccountInfo <- fetch issuerAccount
          receiverAccountInfo <- fetch minterAccount

          fetchedSendingParty <- fetch sending
          fetchedReceivingParty <- fetch receiving

          sendingBankAccount <- create BankAccount
            with
              owner = fromParty
              balance = issuerAccountInfo.balance - amount
          
          receivingBankAccount <- create BankAccount
            with
              owner = toParty
              balance = receiverAccountInfo.balance + amount

          sendingUser <- create User
            with
              user = fromParty
              admin
              account = sendingBankAccount
              offers = fetchedSendingParty.offers
              propertiesOwned = fetchedSendingParty.propertiesOwned
            
          receivingUser <- create User
            with
              user = fetchedReceivingParty.user
              admin
              account = receivingBankAccount
              offers = fetchedSendingParty.offers
              propertiesOwned = fetchedSendingParty.propertiesOwned

          currentTime <- getTime
          newReceipt <- create Receipt
            with
              amount = property.builderRoyaltyRate
              sender = fromParty
              receiver = toParty
              timeReceived = currentTime
          
          return (sendingUser, receivingUser, newReceipt)

template PlatformPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    platformAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin, toParty

    controller fromParty, toParty can
      AcceptPlatformPayable : (ContractId UserProposal, ContractId Platform, ContractId Receipt)
        with
          sending : ContractId User
          receiving : ContractId Platform
        do
          issuerAccountInfo <- fetch issuerAccount
          receiverAccountInfo <- fetch platformAccount

          fetchedSendingParty <- fetch sending
          fetchedPlatform <- fetch receiving

          sendingBankAccount <- create BankAccount
            with
              owner = fromParty
              balance = issuerAccountInfo.balance - property.platformRoyaltyRate
          
          receivingBankAccount <- create BankAccount
            with
              owner = toParty
              balance = receiverAccountInfo.balance + property.platformRoyaltyRate

          sendingUser <- create UserProposal
            with
              user = fromParty
              admin
              account = sendingBankAccount
              offers = fetchedSendingParty.offers
              propertiesOwned = fetchedSendingParty.propertiesOwned
            
          receivingUser <- create Platform
            with
              platform = fetchedPlatform.platform
              admin
              users = fetchedPlatform.users
              account = receivingBankAccount

          currentTime <- getTime
          newReceipt <- create Receipt
            with
              amount = property.platformRoyaltyRate
              sender = fromParty
              receiver = toParty
              timeReceived = currentTime
          
          return (sendingUser, receivingUser, newReceipt)

template PropertyHolderPaymentInitiator
  with
    amount : Decimal
    admin : Party
    owner : Party
    ownerAccount : ContractId BankAccount
    timeSubmitted : Time
  where
    signatory admin
    observer owner

    -- controller admin can
    --   Initiate : (ContractId BankAccount, ContractId Receipt)
    --     do
    --       let passedTime = convertRelTimeToMicroseconds (subTime currentTime timeSubmitted)
    --       let thirtyMinutes = convertRelTimeToMicroseconds (minutes 30)

    --       account <- 