module User where

import DA.Time
import DA.List

template UserProposal
  with
    user : Party
    admin : Party
    account : ContractId BankAccount
    offers : [PropertyOffer]
    propertiesOwned : [Property]
  where
    signatory user
    
    controller admin can
      AcceptUserProposal : ContractId User
        do
          create User with ..
          
      RejectUserProposal : ()
        do return ()

template User
  with
    user : Party
    admin : Party
    account : ContractId BankAccount
    offers : [PropertyOffer]
    propertiesOwned : [Property]
  where
    signatory user, admin
    
    controller user can
      nonconsuming MintProperty : (ContractId Property, ContractId BankAccount, ContractId UserProposal)
        with
          public : [Party]
          newPrice : Decimal
          newAddress : Text
          newBuilderRoyaltyRate : Decimal
          newPlatformRoyaltyRate : Decimal
        do
          accountInfo <- fetch account

          newBankAccount <- create BankAccount
            with
              owner = user
              balance = accountInfo.balance - 10000.0

          newProperty <- create Property 
            with 
              public
              admin
              issuer = user
              owner = user
              price = newPrice
              address = newAddress
              builderRoyaltyRate = newBuilderRoyaltyRate
              platformRoyaltyRate = newPlatformRoyaltyRate
              priceHistory = [newPrice]
          
          fetchedProperty <- fetch newProperty
          
          nicoleUpdateProposal <- create UserProposal
            with 
              user
              admin
              account = newBankAccount
              offers
              propertiesOwned = [fetchedProperty]
          
          return (newProperty, newBankAccount, nicoleUpdateProposal)

template BankAccount
  with
    owner : Party
    balance : Decimal
  where
    signatory owner

    ensure
      balance >= 0.0

    controller owner can
      MakeDeposit : ContractId BankAccount
        with
          amountToDeposit : Decimal
        do
          create BankAccount with
            owner
            balance = balance + amountToDeposit
      
      Transfer : (ContractId BankAccount, ContractId Funds)
        with
          sender : Party
          receiver : Party
          amountToTransfer : Decimal
        do
          account <- create BankAccount with
            balance = balance - amountToTransfer
            ..
          
          funds <- create Funds with
            amount = amountToTransfer
            sender
            receiver
          
          return (account, funds)

template Funds
  with
    amount : Decimal
    sender : Party
    receiver : Party
  where
    signatory sender

    controller receiver can
      AcceptFunds : (ContractId BankAccount, ContractId Receipt)
        with
          bankAccount : ContractId BankAccount
        do
          account <- fetch bankAccount

          newAccount <- create BankAccount
            with
              owner = receiver
              balance = account.balance + amount
          
          currentTime <- getTime
          receipt <- create Receipt with
            amount
            sender = sender
            receiver = receiver
            timeReceived = currentTime

          return (newAccount, receipt)

template Property
  with
    admin : Party
    issuer : Party
    owner : Party
    public : [Party]
    address : Text
    price : Decimal
    builderRoyaltyRate : Decimal
    platformRoyaltyRate : Decimal
    priceHistory : [Decimal]
  where
    signatory issuer, owner
    observer admin, public

    controller issuer, owner can
      UpdatePropertyRoyaltyRate : ContractId Property
        with
          newPlatformRoyaltyRate : Decimal
        do  
          assertMsg 
            "Issuer needs to be the owner in order to update the property royalty rate." 
            (issuer == owner)

          assertMsg 
            "Owner needs to be the issuer in order to update the property royalty rate." 
            (owner == issuer)

          create Property with 
            platformRoyaltyRate = newPlatformRoyaltyRate
            ..

      UpdatePrice : ContractId Property
        with
          newPrice : Decimal
        do
          create Property with
            price = newPrice
            priceHistory = newPrice :: priceHistory
            ..

template Listing 
  with
    admin : Party
    users : [Party]
    owner : Party
    properties : [ContractId Property]
  where
    signatory owner
    observer admin, users

    nonconsuming choice ListProperty : ContractId Listing
      with
        user : Party
        newProperty : ContractId Property
      controller user
      do
        property <- fetch newProperty
        assertMsg 
          "User needs to be the owner in order to List the property." 
          (property.owner == user)
        
        create Listing with 
          admin
          users
          owner
          properties = newProperty :: properties

template PropertyAgreement
  with
    admin : Party
    issuer : Party
    owner : Party
    property : Property
    offerPrice : Decimal
  where
    signatory issuer, owner
    observer admin

template PropertyOffer
  with
    admin : Party
    issuer : Party
    owner : Party
    property : ContractId Property
    offerPrice : Decimal
    timeSubmitted : Time
  where
    signatory issuer
    observer owner

    controller owner can
      AcceptPropertyOffer : 
        (
          ContractId PropertyAgreement, 
          ContractId PropertyOfferPayable, 
          ContractId PlatformPayable, 
          Optional (ContractId ConditionalRoyaltyPayable), 
          ContractId Property
        )
        with
          fromParty : Party
          toParty : Party
          issuerAccount : ContractId BankAccount
          ownerAccount : ContractId BankAccount
          minterAccount : ContractId BankAccount
          platformAccount : ContractId BankAccount
          platform : ContractId Platform
        do
          currentTime <- getTime
          let passedTime = convertRelTimeToMicroseconds (subTime currentTime timeSubmitted)
          let fiveMinutes = convertRelTimeToMicroseconds (minutes 5)

          fetchedProperty <- fetch property
          fetchedIssuerAccount <- fetch issuerAccount

          assertMsg
            ("Offer price needs to match the property price of : " <> show fetchedProperty.price)
            (offerPrice == fetchedProperty.price)

          assertMsg
            "Time duration of 5 minutes has passed. This contract has been rejected."
            (passedTime <= fiveMinutes)
          
          assertMsg
            ("Failed due to insufficient funds." <> show fetchedIssuerAccount)
            (((fetchedIssuerAccount.balance - offerPrice) - ((offerPrice * fetchedProperty.builderRoyaltyRate) + (offerPrice * fetchedProperty.platformRoyaltyRate))) >= 0.0)
        
          propertyAgreement <- create PropertyAgreement 
            with 
              property = fetchedProperty
              ..
          

          propertyOfferPayable <- create PropertyOfferPayable
            with
              admin
              amount = (offerPrice - ((offerPrice * fetchedProperty.platformRoyaltyRate) + (offerPrice * fetchedProperty.builderRoyaltyRate)))
              issuerAccount 
              ownerAccount
              property = fetchedProperty
              fromParty = fromParty
              toParty = toParty

          conditionalRoyaltyPayment <- if fetchedProperty.owner == fetchedProperty.issuer
            then return None
            else Some <$> create ConditionalRoyaltyPayable
              with
                admin
                amount = offerPrice * fetchedProperty.builderRoyaltyRate
                issuerAccount 
                minterAccount
                property = fetchedProperty
                fromParty = fromParty
                toParty = toParty

          platformPayable <- create PlatformPayable
            with
              admin
              amount = offerPrice * fetchedProperty.platformRoyaltyRate
              issuerAccount 
              ownerAccount = platformAccount
              property = fetchedProperty
              fromParty = fromParty
              toParty = toParty
            
          newProperty <- create Property
            with
              admin
              issuer = fetchedProperty.issuer
              owner = issuer
              public = fetchedProperty.public
              address = fetchedProperty.address
              price = fetchedProperty.price
              builderRoyaltyRate = fetchedProperty.builderRoyaltyRate
              platformRoyaltyRate = fetchedProperty.platformRoyaltyRate
              priceHistory = fetchedProperty.priceHistory

          return (propertyAgreement, propertyOfferPayable, platformPayable, conditionalRoyaltyPayment, newProperty)
    
      MakeCounterOffer : ContractId PropertyOffer
        with
          newOfferPrice : Decimal
        do
          create PropertyOffer with
            offerPrice = newOfferPrice
            ..
    
      RejectProposal : ()
        do return ()

    controller issuer can
      WithdrawProposal : ()
        do return ()
      
      ReplaceOffer : (ContractId PropertyOffer, ContractId User)
        with
          user : ContractId User
        do
          now <- getTime
          fetchedProperty <- fetch property
          fetchedUser <- fetch user 

          propertyOffer <- create PropertyOffer with ..
          
          updatedUser <- create User with
            admin
            user = issuer
            account = fetchedUser.account
            offers = this :: fetchedUser.offers
            propertiesOwned = fetchedProperty :: fetchedUser.propertiesOwned
          
          return (propertyOffer, updatedUser)

template PropertyCounterOffer
  with
    admin : Party
    issuer : Party
    owner : Party
    account : BankAccount
    property : Property
    offerPrice : Decimal
  where
    signatory property.owner
    observer issuer, admin
    
    controller owner can
      CreateCounterOffer : ContractId PropertyCounterOffer
        with
          newOfferPrice : Decimal
        do 
          create PropertyCounterOffer
            with
              offerPrice = newOfferPrice
              ..
    
    controller issuer can
      AcceptCounterOffer : ContractId PropertyAgreement
        do
          create PropertyAgreement with ..

-- PLATFORM

template Platform 
  with
    admin : Party
    users : [Party]
    account : ContractId BankAccount
  where
    signatory admin
    observer users

    controller admin can
      nonconsuming UpdateUsers : ContractId Platform
        with
          userToAdd : Party
        do
          create Platform
            with
              users = userToAdd :: users
              ..

-- PAYABLES

template PropertyOfferPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    ownerAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin, toParty

    controller toParty can
      AcceptOwnerPayable : (ContractId UserProposal, ContractId UserProposal, ContractId Receipt)
        with
          sending : ContractId User
          receiving : ContractId User
        do
          issuerAccountInfo <- fetch issuerAccount
          receiverAccountInfo <- fetch ownerAccount

          fetchedSendingParty <- fetch sending
          fetchedReceivingParty <- fetch receiving

          sendingBankAccount <- create BankAccount
            with
              owner = fromParty
              balance = issuerAccountInfo.balance - amount
          
          receivingBankAccount <- create BankAccount
            with
              owner = toParty
              balance = receiverAccountInfo.balance + amount

          sendingUserProposal <- create UserProposal
            with
              user = fromParty
              admin
              account = sendingBankAccount
              offers = fetchedSendingParty.offers
              propertiesOwned = property :: fetchedSendingParty.propertiesOwned
          
          receivingUserProposal <- create UserProposal
            with
              user = toParty
              admin
              account = receivingBankAccount
              offers = fetchedSendingParty.offers
              propertiesOwned = fetchedSendingParty.propertiesOwned

          currentTime <- getTime
          newReceipt <- create Receipt
            with
              amount = property.price
              sender = fromParty
              receiver = toParty
              timeReceived = currentTime
          
          return (sendingUserProposal, receivingUserProposal, newReceipt)

template ConditionalRoyaltyPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    minterAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin

    controller toParty can 
      AcceptConditionalPayable : (ContractId User, ContractId User, ContractId Receipt)
        with
          sending : User
          receiving : User
        do
          issuerAccountInfo <- fetch issuerAccount
          receiverAccountInfo <- fetch minterAccount

          sBankAccount <- create BankAccount
            with
              owner = sending.user
              balance = issuerAccountInfo.balance - amount
          
          rBankAccount <- create BankAccount
            with
              owner = receiving.user
              balance = receiverAccountInfo.balance + amount

          sendingUser <- create User
            with
              user = sending.user
              admin
              account = sBankAccount
              offers = sending.offers
              propertiesOwned = sending.propertiesOwned
            
          receivingUser <- create User
            with
              user = receiving.user
              admin
              account = rBankAccount
              offers = sending.offers
              propertiesOwned = sending.propertiesOwned

          currentTime <- getTime
          newReceipt <- create Receipt
            with
              amount = property.price
              sender = fromParty
              receiver = toParty
              timeReceived = currentTime
          
          return (sendingUser, receivingUser, newReceipt)

template PlatformPayable
  with
    admin : Party
    amount : Decimal
    issuerAccount : ContractId BankAccount
    ownerAccount : ContractId BankAccount
    property : Property
    fromParty : Party
    toParty : Party
  where
    signatory fromParty
    observer admin

    controller toParty can
      AcceptPlatformPayable : (ContractId User, ContractId User, ContractId Receipt)
        with
          sending : User
          receiving : Platform
        do
          issuerAccountInfo <- fetch issuerAccount
          receiverAccountInfo <- fetch ownerAccount

          sendingBankAccount <- create BankAccount
            with
              owner = sending.user
              balance = issuerAccountInfo.balance - property.platformRoyaltyRate
          
          receivingBankAccount <- create BankAccount
            with
              owner = receiving.admin
              balance = receiverAccountInfo.balance + property.platformRoyaltyRate

          sendingUser <- create User
            with
              user = sending.user
              admin
              account = sendingBankAccount
              offers = sending.offers
              propertiesOwned = sending.propertiesOwned
            
          receivingUser <- create User
            with
              user = receiving.admin
              admin
              account = receivingBankAccount
              offers = sending.offers
              propertiesOwned = sending.propertiesOwned

          currentTime <- getTime
          newReceipt <- create Receipt
            with
              amount = property.price
              sender = fromParty
              receiver = toParty
              timeReceived = currentTime
          
          return (sendingUser, receivingUser, newReceipt)

template Receipt
  with
    amount : Decimal
    sender : Party
    receiver : Party
    timeReceived : Time
  where
    signatory sender, receiver

    controller receiver can
      Dismiss : ()
        do return ()
